<ModelBehaviors>

    <!--
    Template for rigging DCDU "BRT / DIM" buttons

    Main Parameters:
            - DCDU_SIDE         <no default>    Either L or R
            - PLANE_NAME        <no default>    Plane project name
            - POTENTIOMETER_ID  85              Potentiometer ID for emissive sequence 1

    Authors: Benjamin Dupont (@Benjozork) 10/10/20
    -->
    <Template Name="FBW_Airbus_DCDU_Brightness_Switch">
        <DefaultTemplateParameters>
            <POTENTIOMETER_ID>85</POTENTIOMETER_ID>
            <BRT_DIM_INVERT_ANIM>1</BRT_DIM_INVERT_ANIM>
            <SEQ1_EMISSIVE_DRIVES_VISIBILITY>False</SEQ1_EMISSIVE_DRIVES_VISIBILITY>
            <WWISE_EVENT>fmc_push_button_on</WWISE_EVENT>
            <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
            <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
        </DefaultTemplateParameters>

        <Component ID="SWITCH_MP#DCDU_SIDE#_DIM" Node="SWITCH_MP#DCDU_SIDE#_DIM">
            <UseTemplate Name="ASOBO_GT_Switch_3States">
                <UPARROW/>
                <DOWNARROW/>
                <LEFTARROW/>
                <RIGHTARROW/>
                <CURSOR>Hand</CURSOR>
                <ANIM_NAME>SWITCH_MP#DCDU_SIDE#_DIM</ANIM_NAME>
                <CODE_POS_0>
                    (L:#PLANE_NAME#_PANEL_DCDU_#DCDU_SIDE#_BRIGHTNESS, percent over 100) 0.05 + 1 min (&gt;L:#PLANE_NAME#_PANEL_DCDU_#DCDU_SIDE#_BRIGHTNESS, percent over 100)
                </CODE_POS_0>
                <CODE_POS_2>
                    (L:#PLANE_NAME#_PANEL_DCDU_#DCDU_SIDE#_BRIGHTNESS, percent over 100) 0.05 - 0.05 max (&gt;L:#PLANE_NAME#_PANEL_DCDU_#DCDU_SIDE#_BRIGHTNESS, percent over 100)
                </CODE_POS_2>
                <STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
                <STATE0_TIMER>0.01</STATE0_TIMER>
                <MOMENTARY_REPEAT_FREQUENCY>5</MOMENTARY_REPEAT_FREQUENCY>
                <MOMENTARY_SWITCH/>

                <Condition Valid="BRT_DIM_SWITCH_DIRECTION">
                    <SWITCH_DIRECTION>#BRT_DIM_SWITCH_DIRECTION#</SWITCH_DIRECTION>
                </Condition>
                <Condition Valid="BRT_DIM_INVERT_ANIM">
                    <INVERT_ANIM>#BRT_DIM_INVERT_ANIM#</INVERT_ANIM>
                </Condition>
            </UseTemplate>
        </Component>

        <Component ID="SWITCH_MP#DCDU_SIDE#_DIM_SEQ1" Node="SWITCH_MP#DCDU_SIDE#_DIM_SEQ1">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                <EMISSIVE_CODE>(A:LIGHT POTENTIOMETER:#POTENTIOMETER_ID#, Percent over 100)</EMISSIVE_CODE>
            </UseTemplate>
        </Component>
    </Template>

    <!--
    Template for rigging DCDU generic buttons

    Main Parameters:
            - NODE_ID           <no default>    Node-ID of the button
            - PLANE_NAME        <no default>    Plane project name
            - HTML_EVENT_ID     <no default>    HTML-Event that will be fired when the button is pushed
            - POTENTIOMETER_ID  85              Potentiometer ID for emissive sequence 1

    Authors: Benjamin Dupont (@Benjozork) 10/10/20
    -->
    <Template Name="FBW_Airbus_DCDU_Generic_Switch">
        <DefaultTemplateParameters>
            <POTENTIOMETER_ID>85</POTENTIOMETER_ID>
            <SEQ1_EMISSIVE_DRIVES_VISIBILITY>False</SEQ1_EMISSIVE_DRIVES_VISIBILITY>
            <WWISE_EVENT_1>fmc_push_button_on</WWISE_EVENT_1>
            <WWISE_EVENT_2>fmc_push_button_off</WWISE_EVENT_2>
            <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
            <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
        </DefaultTemplateParameters>

        <UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
            <ANIM_NAME>#NODE_ID#</ANIM_NAME>
            <SEQ1_EMISSIVE_CODE>(A:LIGHT POTENTIOMETER:#POTENTIOMETER_ID#, percent) 100 /</SEQ1_EMISSIVE_CODE>
            <SEQ2_EMISSIVE_CODE>1</SEQ2_EMISSIVE_CODE>

            <LEFT_SINGLE_CODE>(&gt;H:#PLANE_NAME#_DCDU_BTN_#HTML_EVENT_ID#)</LEFT_SINGLE_CODE>
        </UseTemplate>
    </Template>

    <!--
    Template for rigging inop. DCDU generic buttons

    Main Parameters:
            - NODE_ID           <no default>    Name of the button
            - PLANE_NAME        <no default>    Plane project name
            - POTENTIOMETER_ID  85              Potentiometer ID for emissive sequence 1

    Authors: Benjamin Dupont (@Benjozork) 11/10/20
    -->
    <Template Name="FBW_Airbus_DCDU_Generic_Inop_Switch">
        <UseTemplate Name="FBW_Airbus_DCDU_Generic_Switch">
            <HTML_EVENT_ID>INOP</HTML_EVENT_ID>
        </UseTemplate>
    </Template>


    <!--
    Template for handling autobrake push buttons

    Clone of Asobo template to fix broken logic

    Takes into account the value of L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position.

    Authors: Asobo / Markus Ullmann (@jokey2k) 18/10/20   
    -->
    <Template Name="FBW_Airbus_HANDLING_Push_Autobrakes_Template">
        <DefaultTemplateParameters>
            <AUTOBRAKE_LEVEL>1</AUTOBRAKE_LEVEL>
            <WWISE_EVENT_1>autobrake_push_button_on</WWISE_EVENT_1>
            <WWISE_EVENT_2>autobrake_push_button_off</WWISE_EVENT_2>
            <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
            <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
            <TOOLTIPID>%((L:XMLVAR_RTO_Level) #AUTOBRAKE_LEVEL# ==)%{if}TT:COCKPIT.TOOLTIPS.AUTO_BRK_TURN_OFF%{else}TT:#OFF_TOOLTIP#%{end}</TOOLTIPID>
            <ENGINES_COUNT>2</ENGINES_COUNT>
            <REF_DECEL_FPSS>-7</REF_DECEL_FPSS>
        </DefaultTemplateParameters>
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <!--XMLVAR_Autobrakes_Level it the SIMVAR that tracks the position of the autobrake pushbutton switches in A32NX.
                In order for autobrakes to be set, anti-skid must be enabled. In addition, autobrakes MAX can only
                be set if the aircraft is on the ground.-->
            <UseTemplate Name="ASOBO_GT_Push_Button">
                <LEFT_SINGLE_CODE>
                (A:ANTISKID BRAKES ACTIVE, Bool) ! (L:XMLVAR_Autobrakes_Level) #AUTOBRAKE_LEVEL# == or if{
                    0 (&gt;L:XMLVAR_Autobrakes_Level)
                    } els{
                        (A:SIM ON GROUND, Bool) #AUTOBRAKE_LEVEL# 3 != or if{ 
                            #AUTOBRAKE_LEVEL# (&gt;L:XMLVAR_Autobrakes_Level)
                        }
                    }
                }

                (L:XMLVAR_Autobrakes_Level) 0 == if{
                    1 (&gt;K:SET_AUTOBRAKE_CONTROL)
                } els{
                    (A:SIM ON GROUND, Bool) if{
                        0 (&gt;K:SET_AUTOBRAKE_CONTROL)
                    } els{
                        (L:XMLVAR_Autobrakes_Level) 1 + (&gt;K:SET_AUTOBRAKE_CONTROL)
                    }
                }
                
                (A:SIM ON GROUND, Bool) if{
                    1 (&gt;L:A32NX_DISARM_AUTOBRAKES_ON_LG_RETRACT)
                } els{
                    0 (&gt;L:A32NX_DISARM_AUTOBRAKES_ON_LG_RETRACT)
                }
                </LEFT_SINGLE_CODE>
            </UseTemplate>
            <!--This is the update code that adjusts the autobrake push button settings in response to SIMVAR changes.
                1) A:AUTO BRAKE SWITCH CB is not how we keep track of autobrake settings since it reflects the positioning of the rotary
                   BOEING switch. However, it is currently what is getting set by autobrakes settings in the .flt files. Taxi.flt and Runway.flt
                   both set autobrakes to 4, so we look for that value and set autbrakes to max if we find it. Technically, this is a bit
                   abusive since RTO is 0, while 4 is the maximum setting for normal braking but doing it this way enables us to have 
                   the check work only once.
                   
                2) Autobrakes should automatically disarm 10 seconds after the landing gear is retracted. To simulate this, we use a counter
                   to create a delay after we notice that the landing gear lever has been retracted. Obviously, this won't be exactly accurate,
                   but it is much closer to reality. Once the autobrakes have been automatically disarmed they are allowed to be rearmed. 
                   Additionally, if the aircraft touches down and the autobrakes are not engaged; i.e. in the balked landing scenario where
                   the ground spoilers do not deploy, then the autobrakes will be disarmed normally by landing gear retraction.
                   
                3) Upon landing, the autobrake buttons will be disarmed once autobraking deactivates. To ensure that we are actually down,
                   we will also wait approximately 10 seconds before beginning to test for autobrake deactivation. This is necessary since
                   at least currently, the autobrake system is activating and deactivating during bounced landings.
                   CONSIDER: If the autobrake system is rewritten to accurately simulate the real-life system, can we remove the delay?
                   -->
            <Condition Check="AUTOBRAKE_LEVEL" Match="0">
                <False>
                    <UseTemplate Name="ASOBO_GT_Update">
                        <FREQUENCY>1</FREQUENCY>
                        <UPDATE_CODE>
                        (A:AUTO BRAKE SWITCH CB, Number) 4 == (A:SIM ON GROUND, Bool) and if{
                            3 (&gt;L:XMLVAR_Autobrakes_Level)
                        }
                                
                        (L:XMLVAR_Autobrakes_Level) 0 != if{
                            (L:A32NX_DISARM_AUTOBRAKES_ON_LG_RETRACT) (A:GEAR HANDLE POSITION, Bool) ! and if{
                                 30 (L:A32NX_LG_UP_WAIT_COUNTER) == if{                                                                 
                                     0 (&gt;L:XMLVAR_Autobrakes_Level)
                                     0 (&gt;L:A32NX_DISARM_AUTOBRAKES_ON_LG_RETRACT)
                                     0 == (L:A32NX_LG_UP_WAIT_COUNTER)
                                 } els{
                                    (L:A32NX_LG_UP_WAIT_COUNTER) 1 + (&gt;L:A32NX_LG_UP_WAIT_COUNTER)
                                }
                            } 
                            
                            (A:SIM ON GROUND, Bool) if{
                                1 (&gt;L:A32NX_DISARM_AUTOBRAKES_ON_LG_RETRACT)
                                30 (L:A32NX_ON_GROUND_WAIT_COUNTER) == if{ 
                                    (A:AUTOBRAKES ACTIVE, Bool) if{
                                        1 (&gt;L:A32NX_AUTOBRAKES_ACTIVATED)
                                    }                              
                            
                                    (L:A32NX_AUTOBRAKES_ACTIVATED) (A:AUTOBRAKES ACTIVE, Bool) ! and if{
                                        0 (&gt;L:XMLVAR_Autobrakes_Level)
                                        0 (&gt;L:A32NX_AUTOBRAKES_ACTIVATED)
                                        0 (&gt;A32NX_ON_GROUND_WAIT_COUNTER)
                                    }
                                } els{
                                    (L:A32NX_ON_GROUND_WAIT_COUNTER) 1 + (&gt;L:A32NX_ON_GROUND_WAIT_COUNTER)
                                }
                            } els{
                                0 (&gt;A32NX_ON_GROUND_WAIT_COUNTER)
                            }
                        }  
                        </UPDATE_CODE>
                    </UseTemplate>
                </False>
            </Condition>
        </Component>
        <Component ID="#NODE_ID_DECEL#" Node="#NODE_ID_DECEL#">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                <EMISSIVE_CODE>(A:AUTO BRAKE SWITCH CB, Enum) 1 != (A:ACCELERATION BODY Z, feet per second squared) #REF_DECEL_FPSS# &lt;= and (L:XMLVAR_Autobrakes_Level) #AUTOBRAKE_LEVEL# == and (L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 0 == or</EMISSIVE_CODE>
                <EMISSIVE_DRIVES_VISIBILITY>True</EMISSIVE_DRIVES_VISIBILITY>
            </UseTemplate>
        </Component>
        <Component ID="#NODE_ID_ON#" Node="#NODE_ID_ON#">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                <EMISSIVE_CODE>
                (L:XMLVAR_Autobrakes_Level) #AUTOBRAKE_LEVEL# == (L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 0 == or
                </EMISSIVE_CODE>
            </UseTemplate>
        </Component>
    </Template>

    <!--
    Template for handling landing gear indications

    Authors: Benjamin Dupont (@Benjozork) 10/10/20
    -->
    <Template Name="FBW_Airbus_LANDING_GEAR_Light_Template">
        <DefaultTemplateParameters>
            <NODE_ID>LANDING_GEAR_Light_#ID#</NODE_ID>
            <PART_ID>LANDING_GEAR_Light</PART_ID>
            <SIMVAR>GEAR POSITION:#GEAR_ID#</SIMVAR>
        </DefaultTemplateParameters>
        <UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
            <DUMMY_BUTTON>True</DUMMY_BUTTON>
            <SEQ1_EMISSIVE_CODE>0.01 99.99 (A:#SIMVAR#, Percent) rng (L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 0 == or</SEQ1_EMISSIVE_CODE>
            <SEQ2_EMISSIVE_CODE>90 100 (A:#SIMVAR#, Percent) rng (L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 0 == or</SEQ2_EMISSIVE_CODE>
        </UseTemplate>
    </Template>

    <Template Name="FBW_Airbus_Fuel_Pump">
        <UseTemplate Name="FBW_Push_Toggle">
            <SEQ2_CODE>(A:FUELSYSTEM PUMP SWITCH:#ID#, Enum) 0 ==</SEQ2_CODE>
            <LEFT_SINGLE_CODE>#ID# (&gt;K:FUELSYSTEM_PUMP_TOGGLE)</LEFT_SINGLE_CODE>
            <TOOLTIPID>%((A:FUELSYSTEM PUMP SWITCH:#ID#, Enum) 0 ==)%{if}TT:#OFF_TOOLTIP#%{else}TT:#ON_TOOLTIP#%{end}</TOOLTIPID>
        </UseTemplate>
    </Template>
    <Template Name="FBW_Airbus_Fuel_Crossfeed">
        <UseTemplate Name="FBW_Push_Toggle">
            <SEQ2_CODE>(A:FUELSYSTEM VALVE SWITCH:#ID#, Bool)</SEQ2_CODE>
            <LEFT_SINGLE_CODE>#ID# (&gt;K:FUELSYSTEM_VALVE_TOGGLE)</LEFT_SINGLE_CODE>
            <TOOLTIPID>%((A:FUELSYSTEM VALVE SWITCH:#ID#, Bool) !)%{if}TT:#OFF_TOOLTIP#%{else}TT:#ON_TOOLTIP#%{end}</TOOLTIPID>
        </UseTemplate>
    </Template>

    <Template Name="FBW_Airbus_AntiIce_Engine">
        <DefaultTemplateParameters>
            <ID>1</ID>
            <HELPID>HELPID_CESS_CARB_HEAT</HELPID>
        </DefaultTemplateParameters>

        <UseTemplate Name="FBW_Push_Toggle">
            <TOOLTIPID>%((A:ENG ANTI ICE:#ID#, Bool))%{if}TT:COCKPIT.TOOLTIPS.DEICE_PUSH_ENG_ONLY_ON_#ID# %{else}TT:COCKPIT.TOOLTIPS.DEICE_PUSH_ENG_ONLY_OFF_#ID#%{end}</TOOLTIPID>
            <SEQ2_CODE>(A:ENG ANTI ICE:#ID#, Bool)</SEQ2_CODE>
            <LEFT_SINGLE_CODE>(&gt;K:ANTI_ICE_TOGGLE_ENG#ID#)</LEFT_SINGLE_CODE>
        </UseTemplate>
    </Template>
    <Template Name="FBW_Airbus_AntiIce_Wing">
        <UseTemplate Name="FBW_Push_Toggle">
            <TOOLTIPID>%((A:STRUCTURAL DEICE SWITCH, Bool))%{if}TT:COCKPIT.TOOLTIPS.DEICE_WINGS_ON%{else}TT:COCKPIT.TOOLTIPS.DEICE_WINGS_OFF%{end}</TOOLTIPID>
            <SEQ2_CODE>(A:STRUCTURAL DEICE SWITCH, Bool)</SEQ2_CODE>
            <LEFT_SINGLE_CODE>(&gt;K:TOGGLE_STRUCTURAL_DEICE)</LEFT_SINGLE_CODE>
        </UseTemplate>
    </Template>
    <Template Name="FBW_Airbus_Probes_Window_Heat">
        <DefaultTemplateParameters>
            <ID>1</ID>
            <PART_ID>DEICE_Switch_Windshield</PART_ID>
        </DefaultTemplateParameters>

        <UseTemplate Name="FBW_Push_Toggle">
            <ANIMTIP_1>TT:COCKPIT.TOOLTIPS.PANEL_DEICE_WINDSHIELD_DEICE_ON</ANIMTIP_1>
            <ANIMTIP_0>TT:COCKPIT.TOOLTIPS.PANEL_DEICE_WINDSHIELD_DEICE_OFF</ANIMTIP_0>

            <LEFT_SINGLE_CODE>(L:A32NX_MAN_PITOT_HEAT, Bool) ! (&gt;L:A32NX_MAN_PITOT_HEAT, Bool)</LEFT_SINGLE_CODE>
            <DISABLE_SEQ1/>
            <SEQ2_CODE>(L:A32NX_MAN_PITOT_HEAT)</SEQ2_CODE>
        </UseTemplate>

        <UseTemplate Name="ASOBO_GT_Update">
            <FREQUENCY>0.33</FREQUENCY>
            <UPDATE_CODE>
                (A:ENG COMBUSTION:1, Bool) (A:ENG COMBUSTION:2, Bool) or (L:A32NX_MAN_PITOT_HEAT, Bool) or if{
                    (A:PITOT HEAT, Bool) ! if{ (&gt;K:PITOT_HEAT_ON) }
                    (A:WINDSHIELD DEICE SWITCH, Bool) ! if{ (&gt;K:WINDSHIELD_DEICE_ON) }
                } els{
                    (A:PITOT HEAT, Bool) if{ (&gt;K:PITOT_HEAT_OFF) }
                    (A:WINDSHIELD DEICE SWITCH, Bool) if{ (&gt;K:WINDSHIELD_DEICE_OFF) }
                }
            </UPDATE_CODE>
        </UseTemplate>
    </Template>


    <Template Name="FBW_Airbus_Engine_Bleed_Switch">
        <DefaultTemplateParameters>
            <ID>1</ID>
        </DefaultTemplateParameters>

        <UseTemplate Name="FBW_Push_Toggle">
            <TOOLTIPID>%((A:BLEED AIR ENGINE:#ID#, Bool) !)%{if}TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_ENGINE_#ID#_BLEED_TURN_ON%{else}TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_ENGINE_#ID#_BLEED_TURN_OFF%{end}</TOOLTIPID>
            <SEQ2_CODE>(A:BLEED AIR ENGINE:#ID#, Bool) !</SEQ2_CODE>
            <LEFT_SINGLE_CODE>#ID# (&gt;K:ENGINE_BLEED_AIR_SOURCE_TOGGLE)</LEFT_SINGLE_CODE>
        </UseTemplate>
    </Template>
    <Template Name="FBW_Airbus_APU_Bleed_Switch">
        <UseTemplate Name="FBW_Push_Toggle">
            <TOOLTIPID>%((A:BLEED AIR APU, Bool) )%{if}TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_APU_BLEED_TURN_OFF%{else}TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_APU_BLEED_TURN_ON%{end}</TOOLTIPID>
            <SEQ2_CODE>(A:BLEED AIR APU, Bool)</SEQ2_CODE>
            <LEFT_SINGLE_CODE>(&gt;K:APU_BLEED_AIR_SOURCE_TOGGLE)</LEFT_SINGLE_CODE>
        </UseTemplate>
    </Template>
    <Template Name="FBW_Airbus_APU_Starter_Switch">
        <DefaultTemplateParameters>
            <AVAIL_PERCENTAGE>95</AVAIL_PERCENTAGE>
        </DefaultTemplateParameters>

        <UseTemplate Name="FBW_Push_Toggle">
            <SEQ1_CODE>(A:APU PCT RPM, Percent) #AVAIL_PERCENTAGE# &gt;=</SEQ1_CODE>
            <SEQ2_CODE>(A:APU PCT RPM, Percent) #AVAIL_PERCENTAGE# &lt; (L:A32NX_APU_START_ACTIVATED, Bool) and</SEQ2_CODE>
            <LEFT_SINGLE_CODE>#EXTRA_CONDITION# if{ 1 (&gt;L:A32NX_APU_START_ACTIVATED) }</LEFT_SINGLE_CODE>
            <TOOLTIPID>%((A:APU PCT RPM, Percent) 0 &gt; (A:APU PCT RPM, Percent) #AVAIL_PERCENTAGE# &lt; and)%{if}TT:COCKPIT.TOOLTIPS.UNAVAILABLE%{end} %((A:APU PCT RPM, Percent) #AVAIL_PERCENTAGE# &gt;= (A:APU SWITCH, Bool) and)%{if}TT:COCKPIT.TOOLTIPS.APU_STARTER_TURN_OFF%{else}TT:COCKPIT.TOOLTIPS.APU_STARTER_TURN_ON%{end}</TOOLTIPID>
        </UseTemplate>
    </Template>
    <Template Name="FBW_ENGINE_Switch_Master_Template">
        <DefaultTemplateParameters>
            <NODE_ID>ENGINE_Switch_Master_#ID#</NODE_ID>
            <ANIM_NAME>ENGINE_Switch_Master_#ID#</ANIM_NAME>
            <WWISE_EVENT_1>engine_master_switch_on</WWISE_EVENT_1>
            <WWISE_EVENT_2>engine_master_switch_off</WWISE_EVENT_2>
            <PART_ID>ENGINE_Switch_Master</PART_ID>
            <ANIMTIP_0>TT:COCKPIT.TOOLTIPS.ENGINE#ID#_MASTER_TURN_ON</ANIMTIP_0>
            <ANIMTIP_1>TT:COCKPIT.TOOLTIPS.ENGINE#ID#_MASTER_TURN_OFF</ANIMTIP_1>
        </DefaultTemplateParameters>
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <Update Frequency="5">
						(* This Update Ensures that the state of some simvars that are linked to the same button is consistent. *)
						(A:FUELSYSTEM VALVE SWITCH:#VALVE_ID#, Bool) sp1
						(A:GENERAL ENG STARTER:#ID#, Bool) l1 != if{
							(&gt;K:TOGGLE_STARTER#ID#)
						}
            </Update>
            <UseTemplate Name="ASOBO_GT_Switch_Code">
                <ANIM_CODE>
							(A:FUELSYSTEM VALVE SWITCH:#VALVE_ID#, Bool) 100 *
                </ANIM_CODE>
                <LEFT_SINGLE_CODE>
						(A:FUELSYSTEM VALVE SWITCH:#VALVE_ID#, Bool) if{
								#VALVE_ID# (&gt;K:FUELSYSTEM_VALVE_CLOSE)
								(A:GENERAL ENG STARTER:#ID#, Bool) if{
									(&gt;K:TOGGLE_STARTER#ID#)
								}
							} els{
								#VALVE_ID# (&gt;K:FUELSYSTEM_VALVE_OPEN)
								(A:GENERAL ENG STARTER:#ID#, Bool) ! if{
									(&gt;K:TOGGLE_STARTER#ID#)
								}
							}
                </LEFT_SINGLE_CODE>
            </UseTemplate>
        </Component>
        <Condition Check="POTENTIOMETER">
            <Component ID="#NODE_ID#_SEQ1" Node="#NODE_ID#_SEQ1">
                <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                    <EMISSIVE_CODE>(A:LIGHT POTENTIOMETER:#POTENTIOMETER#, Percent over 100)</EMISSIVE_CODE>
                </UseTemplate>
            </Component>
        </Condition>
    </Template>

    <Template Name="FBW_Airbus_Push_EFIS_GPWS">
        <UseTemplate Name="FBW_Push_Held">
            <WWISE_EVENT_1>apu_generator_switch_on</WWISE_EVENT_1>
            <WWISE_EVENT_2>apu_generator_switch_off</WWISE_EVENT_2>

            <SEQ1_CODE>(L:A32NX_GPWS_Warning_Active, Bool)</SEQ1_CODE>
            <SEQ2_CODE>(L:A32NX_GPWS_GS_Warning_Active, Bool)</SEQ2_CODE>
            <HOLD_SIMVAR>L:A32NX_GPWS_TEST</HOLD_SIMVAR>
            <SEQ1_EMISSIVE_DRIVES_VISIBILITY>True</SEQ1_EMISSIVE_DRIVES_VISIBILITY>
            <SEQ2_EMISSIVE_DRIVES_VISIBILITY>True</SEQ2_EMISSIVE_DRIVES_VISIBILITY>

            <TOOLTIPID>Test GPWS / Stop G/S alert</TOOLTIPID>
        </UseTemplate>
    </Template>

    <Template Name="FBW_Airbus_Sidestick_Priority">
        <DefaultTemplateParameters>
            <WWISE_EVENT_1>yoke_push_button_on</WWISE_EVENT_1>
            <WWISE_EVENT_2>yoke_push_button_off</WWISE_EVENT_2>
            <ANIM_NAME>#NODE_ID#</ANIM_NAME>
            <ID>1</ID>
            <TOOLTIPID>%((A:AUTOPILOT MASTER, Bool))%{if}Disc. Autopilot%{else}Take priority%{end}</TOOLTIPID>
        </DefaultTemplateParameters>

        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Push_Button_Held">
                <LEFT_SINGLE_CODE>
                    (A:AUTOPILOT MASTER, Bool) if{
                        (&gt;K:AP_MASTER)
                    } els{
                        1 (&gt;L:A32NX_PRIORITY_TAKEOVER:#ID#)
                    }
                </LEFT_SINGLE_CODE>
                <LEFT_LEAVE_CODE>
                    0 (&gt;L:A32NX_PRIORITY_TAKEOVER:#ID#)
                </LEFT_LEAVE_CODE>
            </UseTemplate>
        </Component>
    </Template>
</ModelBehaviors>
